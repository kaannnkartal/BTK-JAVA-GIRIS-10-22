import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class CFGConverter {
    // A production in the grammar is represented as a pair of strings, where the
    // left-hand side (LHS) is the non-terminal symbol and the right-hand side (RHS)
    // is a string of symbols, which can be a combination of terminals and non-terminals
    private static class Production {
        String lhs;
        String rhs;

        Production(String lhs, String rhs) {
            this.lhs = lhs;
            this.rhs = rhs;
        }
    }

    // The grammar is represented as a set of productions
    private Set<Production> productions;

    // The start symbol of the grammar
    private String startSymbol;

    // A map that stores the nullable non-terminals (those that can generate the empty string)
    private Map<String, Boolean> nullables;

    // A map that stores the unit productions (those of the form X -> Y)
    private Map<String, String> units;

    // A set that stores the useless non-terminals (those that cannot reach any terminal symbols)
    private Set<String> useless;

    public CFGConverter(Set<Production> productions, String startSymbol) {
        this.productions = productions;
        this.startSymbol = startSymbol;
        this.nullables = new HashMap<>();
        this.units = new HashMap<>();
        this.useless = new HashSet<>();
    }

    // Returns the set of nullable non-terminals
    public Set<String> getNullables() {
        return nullables.keySet();
    }

    // Returns the set of useless non-terminals
    public Set<String> getUseless() {
        return useless;
    }

    // Eliminates null, unit, and useless productions from the grammar
    public void eliminateNullUnitUseless() {
        // Compute the nullable, unit, and useless non-terminals
        computeNullables();
        computeUnits();
        computeUseless();

        // Remove the null, unit, and useless productions from the grammar
        removeNullProductions();
        removeUnitProductions();
        removeUselessProductions();
    }


    // Computes the unit productions (those of the form X -> Y)
    private void computeUnits() {
        // Initialize all non-terminals as having no unit production
        for (Production p : productions) {
            units.put(p.lhs, null);
        }

        // Iteratively find the unit productions until no more can be found
        boolean changed = true;
        while (changed) {
            changed = false;
            for (Production p : productions) {
                // If the RHS of the production is a single non-terminal, store it as a unit production
                if (p.rhs.length() == 1 && p.rhs.charAt(0) >= 'A' && p.rhs.charAt(0) <= 'Z') {
                    String rhs = p.rhs;
                    if (units.get(p.lhs) == null) {
                        units.put(p.lhs, rhs);
                        changed = true;
                    }
                }
            }
        }
    }

    // Computes the useless non-terminals (those that cannot reach any terminal symbols)
    private void computeUseless() {
        // Initialize all non-terminals as useful
        for (Production p : productions) {
            useless.remove(p.lhs);
        }

        // Iteratively mark the useless non-terminals until no more can be found
        boolean changed = true;
        while (changed) {
            changed = false;
            for (Production p : productions) {
                // If the LHS of the production is useless, mark the RHS symbols as useless
                if (useless.contains(p.lhs)) {
                    for (int i = 0; i < p.rhs.length(); i++) {
                        char c = p.rhs.charAt(i);
                        if (c >= 'A' && c <= 'Z' && !useless.contains(String.valueOf(c))) {
                            useless.add(String.valueOf(c));
                            changed = true;
                        }
                    }
                }
            }
        }
    }

    // Removes null productions (those of the form X -> Îµ) from the grammar
    private void removeNullProductions() {
        // Remove null productions that do not have any non-nullable symbols in their RHS
        Set<Production> toRemove = new HashSet<>();
        for (Production p : productions) {
            if (p.rhs.equals("")) {
                toRemove.add(p);
            } else {
                boolean nullable = true;
                for (int i = 0; i < p.rhs.length(); i++) {
                    char c = p.rhs.charAt(i);
                    if (c >= 'A' && c <= 'Z' && !nullables.get(String.valueOf(c))) {
                        nullable = false;
                        break;
                    }
                }
                if (nullable) {
                    toRemove.add(p);
                }
            }
        }
        productions.removeAll(toRemove);

        // Add new productions for each unit production X -> Y by replacing Y with the RHS of a production for Y
        Set<Production> toAdd = new HashSet<>();
        for (Production p : productions) {
            if (p.rhs.length() == 1 && p.rhs.charAt(0) >= 'A' && p.rhs.charAt(0) <= 'Z') {
                String rhs = units.get(p.rhs);
                while (rhs != null) {
                    for (Production p2 : productions) {
                        if (p2.lhs.equals(rhs)) {
                            toAdd.add(new Production(p.lhs, p2.rhs));
                        }
                    }
                    rhs = units.get(rhs);
                }
            }
        }
        productions.addAll(toAdd);
    }

    // Removes useless productions (those whose LHS is a useless non-terminal) from the grammar
    private void removeUselessProductions() {
        Set<Production> toRemove = new HashSet<>();
        for (Production p : productions) {
            if (useless.contains(p.lhs)) {
                toRemove.add(p);
            }
        }
        productions.removeAll(toRemove);
    }

    // Eliminates terminals from the RHS of productions if they exist with other terminals or non-terminals
    public void eliminateTerminals() {
        // Create a map that stores the new non-terminal symbols for each terminal symbol
        Map<String, String> terminals = new HashMap<>();


        // Iterate over the productions and create new non-terminals for each non-terminal symbol with more than two symbols on the RHS
        Set<Production> toAdd = new HashSet<>();
        for (Production p : productions) {
            if (p.rhs.length() > 2) {
                String nonTerminal = nonTerminals.get(p.lhs);
                if (nonTerminal == null) {
                    nonTerminal = String.valueOf((char)('Z' + nonTerminals.size() + 1));
                    nonTerminals.put(p.lhs, nonTerminal);
                }
                String rhs = p.rhs.substring(0, 1);
                toAdd.add(new Production(p.lhs, rhs));
                for (int i = 1; i < p.rhs.length() - 1; i++) {
                    rhs = p.rhs.substring(i, i + 1);
                    toAdd.add(new Production(nonTerminal, rhs));
                    nonTerminal = String.valueOf((char)('Z' + nonTerminals.size() + 1));
                    nonTerminals.put(p.lhs, nonTerminal);
                }
                rhs = p.rhs.substring(p.rhs.length() - 1);
                toAdd.add(new Production(nonTerminal, rhs));
            }
        }
        productions.addAll(toAdd);
    }

    // Returns the productions of the grammar in CNF
    public Set<Production> getProductions() {
        return productions;
    }

}
